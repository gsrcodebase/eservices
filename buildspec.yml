version: 0.2

env:
  secrets-manager:
    GITHUB_SECRET: "eservicesgithub"  # Correct secret name in Secrets Manager

phases:
  install:
    runtime-versions:
      python: 3.12 
    commands:
      - echo Installing Terraform
      - curl -sLo terraform.zip https://releases.hashicorp.com/terraform/1.4.6/terraform_1.4.6_linux_amd64.zip
      - ls -l terraform.zip  # Optional: Check if the file was downloaded correctly
      - unzip -o terraform.zip  # '-o' flag forces overwrite without prompting
      - mv terraform /usr/local/bin/
      - terraform --version
      - pip install -r lambda/requirements.txt  # Install Python dependencies for Lambda
      - apt-get install -y zip  # Ensure zip is installed for packaging Lambda function
      - terraform init  # Initialize Terraform

  pre_build:
    commands:
      - echo Retrieving GitHub PAT from Secrets Manager...
      - |
        # Retrieve the secret and parse the Token from the secret
        export GITHUB_TOKEN=$(aws secretsmanager get-secret-value --secret-id $GITHUB_SECRET --query 'SecretString' --output text | jq -r '.Token')
        export GITHUB_USERNAME="gsrcodebase"
        echo "Cloning repository using the PAT..."

        # Clone the repository using the GitHub PAT
        git clone https://$GITHUB_USERNAME:$GITHUB_TOKEN@github.com/your_github_account/eservices.git

  build:
    commands:
      - echo Building Lambda function and deploying infrastructure
      - zip -r lambda/email_sender.zip lambda/  # Package Lambda function
      - terraform plan -out=tfplan  # Plan Terraform deployment
      - terraform apply -auto-approve  # Apply Terraform deployment

  post_build:
    commands:
      - echo "Build and deployment complete"

artifacts:
  files:
    - lambda/email_sender.zip  # Artifacts to be passed on for deployment
    - terraform/*  # Include the terraform configuration in artifacts for later stages
